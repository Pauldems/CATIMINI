import { collection, query, where, getDocs, deleteDoc, writeBatch } from 'firebase/firestore';
import { db } from '../config/firebase';

/**
 * Service de nettoyage automatique des donn√©es obsol√®tes
 */
export class CleanupService {
  
  /**
   * Supprime les indisponibilit√©s dont la date est pass√©e
   * @param daysToKeep Nombre de jours √† conserver apr√®s la date (par d√©faut 0 = suppression imm√©diate)
   */
  static async cleanupOldAvailabilities(daysToKeep: number = 0): Promise<void> {
    try {
      console.log('üßπ [CleanupService] D√©but du nettoyage des indisponibilit√©s...');
      
      // Calculer la date limite (aujourd'hui - daysToKeep)
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
      const cutoffDateStr = cutoffDate.toISOString().split('T')[0];
      
      if (daysToKeep === 0) {
        console.log(`üßπ [CleanupService] Suppression des indisponibilit√©s ant√©rieures √† aujourd'hui (${cutoffDateStr})`);
      } else {
        console.log(`üßπ [CleanupService] Suppression des indisponibilit√©s ant√©rieures au ${cutoffDateStr}`);
      }
      
      // Requ√™te pour trouver les indisponibilit√©s obsol√®tes
      const availabilitiesRef = collection(db, 'availabilities');
      const oldAvailabilitiesQuery = query(
        availabilitiesRef,
        where('date', '<', cutoffDateStr),
        where('isAvailable', '==', false) // Ne supprimer que les indisponibilit√©s
      );
      
      const snapshot = await getDocs(oldAvailabilitiesQuery);
      
      if (snapshot.empty) {
        console.log('üßπ [CleanupService] Aucune indisponibilit√© obsol√®te trouv√©e');
        return;
      }
      
      console.log(`üßπ [CleanupService] ${snapshot.docs.length} indisponibilit√©s obsol√®tes trouv√©es`);
      
      // Utiliser batch pour supprimer efficacement
      const batch = writeBatch(db);
      let batchCount = 0;
      const batchSize = 500; // Limite Firestore
      
      for (const doc of snapshot.docs) {
        const data = doc.data();
        console.log(`üßπ [CleanupService] Suppression: ${data.date} ${data.startTime}-${data.endTime} (userId: ${data.userId})`);
        
        batch.delete(doc.ref);
        batchCount++;
        
        // Ex√©cuter le batch si on atteint la limite
        if (batchCount >= batchSize) {
          await batch.commit();
          console.log(`üßπ [CleanupService] Batch de ${batchCount} suppressions ex√©cut√©`);
          batchCount = 0;
        }
      }
      
      // Ex√©cuter le dernier batch s'il reste des √©l√©ments
      if (batchCount > 0) {
        await batch.commit();
        console.log(`üßπ [CleanupService] Dernier batch de ${batchCount} suppressions ex√©cut√©`);
      }
      
      console.log(`‚úÖ [CleanupService] Nettoyage termin√©: ${snapshot.docs.length} indisponibilit√©s supprim√©es`);
      
    } catch (error) {
      console.error('‚ùå [CleanupService] Erreur lors du nettoyage:', error);
      throw error;
    }
  }
  
  /**
   * Supprime les √©v√©nements termin√©s depuis plus de X jours
   * @param daysToKeep Nombre de jours √† conserver apr√®s la fin de l'√©v√©nement
   */
  static async cleanupOldEvents(daysToKeep: number = 30): Promise<void> {
    try {
      console.log('üßπ [CleanupService] D√©but du nettoyage des √©v√©nements termin√©s...');
      
      // Calculer la date limite
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
      const cutoffDateStr = cutoffDate.toISOString().split('T')[0];
      
      console.log(`üßπ [CleanupService] Suppression des √©v√©nements termin√©s avant le ${cutoffDateStr}`);
      
      // Requ√™te pour trouver les √©v√©nements termin√©s
      const eventsRef = collection(db, 'events');
      const oldEventsQuery = query(
        eventsRef,
        where('endDate', '<', cutoffDateStr)
      );
      
      const snapshot = await getDocs(oldEventsQuery);
      
      if (snapshot.empty) {
        console.log('üßπ [CleanupService] Aucun √©v√©nement obsol√®te trouv√©');
        return;
      }
      
      console.log(`üßπ [CleanupService] ${snapshot.docs.length} √©v√©nements obsol√®tes trouv√©s`);
      
      // Supprimer les √©v√©nements et leurs indisponibilit√©s li√©es
      const batch = writeBatch(db);
      let batchCount = 0;
      
      for (const doc of snapshot.docs) {
        const eventData = doc.data();
        console.log(`üßπ [CleanupService] Suppression √©v√©nement: ${eventData.title} (fin: ${eventData.endDate})`);
        
        // Supprimer l'√©v√©nement
        batch.delete(doc.ref);
        batchCount++;
        
        // Supprimer les indisponibilit√©s cr√©√©es par cet √©v√©nement
        const eventAvailabilitiesQuery = query(
          collection(db, 'availabilities'),
          where('createdByEvent', '==', doc.id)
        );
        
        const eventAvailsSnapshot = await getDocs(eventAvailabilitiesQuery);
        eventAvailsSnapshot.docs.forEach(availDoc => {
          batch.delete(availDoc.ref);
          batchCount++;
        });
        
        // Ex√©cuter le batch si n√©cessaire
        if (batchCount >= 450) { // Laisser de la marge
          await batch.commit();
          console.log(`üßπ [CleanupService] Batch de ${batchCount} suppressions ex√©cut√©`);
          batchCount = 0;
        }
      }
      
      // Ex√©cuter le dernier batch
      if (batchCount > 0) {
        await batch.commit();
        console.log(`üßπ [CleanupService] Dernier batch de ${batchCount} suppressions ex√©cut√©`);
      }
      
      console.log(`‚úÖ [CleanupService] Nettoyage termin√©: ${snapshot.docs.length} √©v√©nements supprim√©s`);
      
    } catch (error) {
      console.error('‚ùå [CleanupService] Erreur lors du nettoyage des √©v√©nements:', error);
      throw error;
    }
  }
  
  /**
   * Effectue un nettoyage complet (indisponibilit√©s + √©v√©nements)
   */
  static async performFullCleanup(): Promise<void> {
    try {
      console.log('üßπ [CleanupService] D√©but du nettoyage complet...');
      
      // Nettoyer les indisponibilit√©s (suppression imm√©diate d√®s que la date est pass√©e)
      await this.cleanupOldAvailabilities(0);
      
      // Nettoyer les √©v√©nements termin√©s (conserver 30 jours)
      await this.cleanupOldEvents(30);
      
      console.log('‚úÖ [CleanupService] Nettoyage complet termin√©');
      
    } catch (error) {
      console.error('‚ùå [CleanupService] Erreur lors du nettoyage complet:', error);
      throw error;
    }
  }
}