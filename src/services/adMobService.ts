// Imports conditionnels pour √©viter les erreurs Expo Go
let AdMobModule: any = null;
try {
  if (!__DEV__) {
    AdMobModule = require('expo-ads-admob');
  }
} catch (error) {
  console.log('AdMob non disponible');
}
import { Platform } from 'react-native';
import premiumService from './premiumService';

// IDs AdMob - iOS en production, Android en test
export const AD_UNIT_IDS = {
  banner: Platform.select({
    ios: 'ca-app-pub-6698381010934241/3318200340', // Votre vrai ID
    android: 'ca-app-pub-3940256099942544/6300978111', // Test
  }),
  interstitial: Platform.select({
    ios: 'ca-app-pub-6698381010934241/6236007724', // Votre vrai ID "Start"
    android: 'ca-app-pub-3940256099942544/1033173712', // Test
  }),
};

class AdMobService {
  private static instance: AdMobService;
  private isInitialized = false;
  private lastAdShown = 0;
  private minTimeBetweenAds = 30000; // 30 secondes minimum entre les pubs

  static getInstance(): AdMobService {
    if (!AdMobService.instance) {
      AdMobService.instance = new AdMobService();
    }
    return AdMobService.instance;
  }

  async initialize() {
    if (this.isInitialized) return;

    try {
      // V√©rifier si on est dans Expo Go (AdMob pas support√©)
      if (__DEV__) {
        console.log('‚ö†Ô∏è AdMob d√©sactiv√© en mode d√©veloppement (Expo Go)');
        this.isInitialized = true;
        return;
      }

      // Demander les permissions
      if (AdMobModule) {
        await AdMobModule.requestPermissionsAsync();
      }

      // Pr√©parer la premi√®re pub interstitielle
      this.prepareInterstitial();

      console.log('üì± AdMob initialis√© avec succ√®s');
      this.isInitialized = true;
    } catch (error) {
      console.error('‚ùå Erreur initialisation AdMob:', error);
      this.isInitialized = true; // Marquer comme initialis√© pour √©viter les r√©p√©titions
    }
  }

  async showInterstitial() {
    // Ne pas afficher de pub pour les utilisateurs premium
    if (premiumService.isPremium()) {
      console.log('‚ú® Pub ignor√©e (utilisateur premium)');
      return;
    }

    // D√©sactiv√© en d√©veloppement (Expo Go)
    if (__DEV__) {
      console.log('üì± Pub interstitielle simul√©e (mode dev)');
      return;
    }

    // V√©rifier si assez de temps s'est √©coul√© depuis la derni√®re pub
    const now = Date.now();
    if (now - this.lastAdShown < this.minTimeBetweenAds) {
      console.log('üì± Pub interstitielle ignor√©e (trop r√©cente)');
      return;
    }

    try {
      if (AdMobModule) {
        await AdMobModule.AdMobInterstitial.setAdUnitID(AD_UNIT_IDS.interstitial!);
        await AdMobModule.AdMobInterstitial.requestAdAsync({ servePersonalizedAds: true });
        await AdMobModule.AdMobInterstitial.showAdAsync();
      }
      
      this.lastAdShown = now;
      
      // Pr√©parer la prochaine pub apr√®s avoir montr√© celle-ci
      setTimeout(() => {
        this.prepareInterstitial();
      }, 2000);
      
      console.log('üì± Pub interstitielle affich√©e');
    } catch (error) {
      console.error('‚ùå Erreur interstitial:', error);
    }
  }

  // Pr√©parer l'interstitial √† l'avance
  async prepareInterstitial() {
    // D√©sactiv√© en d√©veloppement
    if (__DEV__) {
      return;
    }

    try {
      if (AdMobModule) {
        await AdMobModule.AdMobInterstitial.setAdUnitID(AD_UNIT_IDS.interstitial!);
        await AdMobModule.AdMobInterstitial.requestAdAsync({ servePersonalizedAds: true });
        console.log('üì± Pub interstitielle pr√©par√©e');
      }
    } catch (error) {
      console.error('‚ùå Erreur pr√©paration interstitial:', error);
    }
  }

  // Afficher une pub au lancement de l'app
  async showLaunchAd() {
    // Attendre un peu que l'utilisateur voie l'app
    setTimeout(() => {
      this.showInterstitial();
    }, 3000); // 3 secondes apr√®s l'ouverture
  }
}

export default AdMobService.getInstance();